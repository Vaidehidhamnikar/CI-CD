# name: Calculator App CI/CD to Snowflake

# on:
#   push:
#     branches: [ "main" ]
#   workflow_dispatch:

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set Version Tag
#         id: vars
#         run: |
#           VERSION_TAG="v${GITHUB_RUN_NUMBER}"
#           echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
#           echo "IMAGE_NAME=calculator-app-$VERSION_TAG" >> $GITHUB_ENV

#       - name: Build Docker Image
#         run: |
#           echo "Building image: $IMAGE_NAME"
#           docker build --platform=linux/amd64 -t $IMAGE_NAME .

#       - name: Docker Login to Snowflake
#         run: |
#           echo "${{ secrets.SNOWFLAKE_DOCKER_PASSWORD }}" | \
#           docker login ubhovfa-kasmo-inc.registry.snowflakecomputing.com \
#           -u ${{ secrets.SNOWFLAKE_DOCKER_USERNAME }} --password-stdin

#       - name: Tag and Push Docker Image
#         run: |
#           REGISTRY="ubhovfa-kasmo-inc.registry.snowflakecomputing.com"
#           REPO_PATH="dash_db/dash_schema/image_repo_test" # Update with your DB/Schema/Stage
#           FULL_TAG="$REGISTRY/$REPO_PATH/$IMAGE_NAME"

#           echo "Tagging image: $FULL_TAG"
#           docker tag $IMAGE_NAME $FULL_TAG
#           echo "Pushing image: $FULL_TAG"
#           docker push $FULL_TAG









# name: Calculator App CI/CD to Snowflake

# on:
#   push:
#     branches: [ "main" ]
#   workflow_dispatch:

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set Version Tag
#         id: vars
#         run: |
#           VERSION_TAG="v${GITHUB_RUN_NUMBER}"
#           echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
#           echo "IMAGE_NAME=calculator-app-$VERSION_TAG" >> $GITHUB_ENV

#       - name: Build Docker Image
#         run: |
#           echo "Building image: $IMAGE_NAME"
#           docker build --platform=linux/amd64 -t $IMAGE_NAME .

#       - name: Docker Login to Snowflake
#         run: |
#           echo "${{ secrets.SNOWFLAKE_DOCKER_PASSWORD }}" | \
#           docker login ubhovfa-kasmo-inc.registry.snowflakecomputing.com \
#           -u ${{ secrets.SNOWFLAKE_DOCKER_USERNAME }} --password-stdin

#       - name: Tag and Push Docker Image
#         run: |
#           REGISTRY="ubhovfa-kasmo-inc.registry.snowflakecomputing.com"
#           REPO_PATH="dash_db/dash_schema/image_repo_test" # Update with your DB/Schema/Stage
#           FULL_TAG="$REGISTRY/$REPO_PATH/$IMAGE_NAME"

#           echo "Tagging image: $FULL_TAG"
#           docker tag $IMAGE_NAME $FULL_TAG
#           echo "Pushing image: $FULL_TAG"
#           docker push $FULL_TAG

#     #   - name: Install SnowSQL
#     #     run: |
#     #       sudo apt-get update
#     #       sudo apt-get install -y unzip curl
#     #       curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.24-linux_x86_64.bash
#     #       bash snowsql-1.2.24-linux_x86_64.bash
#     #       echo "$HOME/bin" >> $GITHUB_PATH

#       - name: Run Snowflake Commands
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
#           SNOWSQL_USER: ${{ secrets.SNOWFLAKE_USER }}
#           SNOWSQL_PWD: ${{ secrets.SNOWFLAKE_PASSWORD }}
#         # run: |
#         #   snowsql -a $SNOWSQL_ACCOUNT -u $SNOWSQL_USER -p $SNOWSQL_PWD -q "USE ROLE ACCOUNTADMIN; USE WAREHOUSE DASH_S;"
#         #   snowsql -a $SNOWSQL_ACCOUNT -u $SNOWSQL_USER -p $SNOWSQL_PWD -q "PUT file://.github/workflows/ci.yml @dash_db.dash_schema.image_repo_test OVERWRITE = TRUE;"
#         #   snowsql -a $SNOWSQL_ACCOUNT -u $SNOWSQL_USER -p $SNOWSQL_PWD -q "ALTER SERVICE CI_CD_SERVICE FROM @dash_db/dash_schema/image_repo_test SPECIFICATION_FILE = 'update.yaml';"
#         #   snowsql -a $SNOWSQL_ACCOUNT -u $SNOWSQL_USER -p $SNOWSQL_PWD -q "ALTER SERVICE CI_CD_SERVICE RESUME;"


#         run: |
#             snow sql -q "USE ROLE ACCOUNTADMIN; USE WAREHOUSE DASH_S;"
#             snow sql -q "PUT file://.github/workflows/ci.yml @dash_db.dash_schema.image_repo_test OVERWRITE = TRUE;"
#             snow sql -q "ALTER SERVICE CI_CD_SERVICE FROM @dash_db/dash_schema/image_repo_test SPECIFICATION_FILE = 'update.yaml';"
#             snow sql -q "ALTER SERVICE CI_CD_SERVICE RESUME;"







name: Calculator App CI/CD to Snowflake

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python and SnowSQL
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install snowflake-cli

      - name: Configure SnowSQL
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ACCOUNTADMIN
          SNOWFLAKE_WAREHOUSE: COMPUTE_WH
        run: |
          snow sql -q "USE ROLE ACCOUNTADMIN; USE WAREHOUSE COMPUTE_WH;"
          snow sql -q "PUT file://snowflake/COP_FINANCE/update.yaml @FINANCE.REPORT.SPECS OVERWRITE = TRUE;"
        #   snow sql -q "ALTER SERVICE CI_CD_SERVICE FROM @FINANCE.REPORT.SPECS SPECIFICATION_FILE = 'update.yaml';"
        #   snow sql -q "ALTER SERVICE CI_CD_SERVICE RESUME;"

